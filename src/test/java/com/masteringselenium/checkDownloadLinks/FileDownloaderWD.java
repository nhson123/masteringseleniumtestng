package com.masteringselenium.checkDownloadLinks;

import com.masteringselenium.DriverFactory;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.cookie.BasicClientCookie;
import org.apache.http.protocol.BasicHttpContext;
import org.openqa.selenium.*;
import org.testng.annotations.Test;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.util.List;
import java.util.Set;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

/**
 * Package: com.masteringselenium.checkDownloadLinks Generated by: Hoang.Son.Nguyen Generated at:
 * 04.01.2019 2019
 */
public class FileDownloaderWD extends DriverFactory{
  private RequestType httpRequestMethod = RequestType.GET;
  private URI fileURI;
  List<NameValuePair> urlParameters;
  private WebDriver driver;

  public FileDownloaderWD(WebDriver driverObject) {
    this.driver = driverObject;
  }

  public void setHTTPRequestMethod(RequestType requestType) {
    httpRequestMethod = requestType;
  }

  public void setURLParameters(List<NameValuePair> urlParameters) {
    this.urlParameters = urlParameters;
  }

  public void setURI(URI linkToFile) throws MalformedURLException {
    fileURI = linkToFile;
  }

  private HttpResponse makeHTTPConnection() throws IOException, NullPointerException {
    if (fileURI == null) throw new NullPointerException("No      file URI specified");
    CloseableHttpClient client = HttpClientBuilder.create().build();
    HttpRequestBase requestMethod = httpRequestMethod.getRequestMethod();
    requestMethod.setURI(fileURI);
    BasicHttpContext localContext = new BasicHttpContext();
    localContext.setAttribute(
        HttpClientContext.COOKIE_STORE, getWebDriverCookies(driver.manage().getCookies()));
    requestMethod.setHeader("User-Agent", getWebDriverUserAgent());
    if (null != urlParameters
        && (httpRequestMethod.equals(RequestType.PATCH)
            || httpRequestMethod.equals(RequestType.POST)
            || httpRequestMethod.equals(RequestType.PUT))) {
      ((HttpEntityEnclosingRequestBase) requestMethod)
          .setEntity(new UrlEncodedFormEntity(urlParameters));
    }
    return client.execute(requestMethod, localContext);
  }

  public int getLinkHTTPStatus() throws Exception {
    HttpResponse downloadableFile = makeHTTPConnection();
    int httpStatusCode;
    try {
      httpStatusCode = downloadableFile.getStatusLine().getStatusCode();
    } finally {
      if (null != downloadableFile.getEntity()) {
        downloadableFile.getEntity().getContent().close();
      }
    }
    return httpStatusCode;
  }

  private String getWebDriverUserAgent() {
    JavascriptExecutor js = (JavascriptExecutor) driver;
    return js.executeScript("return navigator.userAgent").toString();
  }

  private BasicCookieStore getWebDriverCookies(Set<Cookie> seleniumCookieSet) {
    BasicCookieStore copyOfWebDriverCookieStore = new BasicCookieStore();
    for (Cookie seleniumCookie : seleniumCookieSet) {
      BasicClientCookie duplicateCookie =
          new BasicClientCookie(seleniumCookie.getName(), seleniumCookie.getValue());
      duplicateCookie.setDomain(seleniumCookie.getDomain());
      duplicateCookie.setSecure(seleniumCookie.isSecure());
      duplicateCookie.setExpiryDate(seleniumCookie.getExpiry());
      duplicateCookie.setPath(seleniumCookie.getPath());
      copyOfWebDriverCookieStore.addCookie(duplicateCookie);
    }
    return copyOfWebDriverCookieStore;
  }

  public static int verifyURLStatus(String URL) {
    CloseableHttpClient client = HttpClientBuilder.create().build();
    HttpGet request = new HttpGet(URL);
    int invalidLinksCount = 0;
    try {
      HttpResponse response = client.execute(request);
      // verifying response code and The HttpStatus should be 200 if not,
      // increment invalid link count
      // We can also check for 404 status code like response.getStatusLine().getStatusCode() == 404
      if (response.getStatusLine().getStatusCode() != 200)
        invalidLinksCount++;
      System.out.println(response.getStatusLine().getStatusCode());
    } catch (Exception e) {
      e.printStackTrace();
    }
    return invalidLinksCount;
  }

  @Test
  public void statusCodeFromEmbeddedFile() throws Exception {
    driver = DriverFactory.getDriver();
    FileDownloaderWD downloadHandler = new FileDownloaderWD(driver);
    driver.get("http://www.masteringselenium.com/downloadTest.html");
    WebElement fileThatShouldExist = driver.findElement(By.id("fileToDownload"));
    URI fileAsURI = new URI(fileThatShouldExist.getAttribute("href"));
    downloadHandler.setURI(fileAsURI);
    downloadHandler.setHTTPRequestMethod(RequestType.GET);
    assertEquals(downloadHandler.getLinkHTTPStatus(),"200");
  }



  @Test
  public void checkDownloadLink(){
    String URL="http://cdn.rentbyowner.com/sitemap/gz/site-map-0.xml.gz";
    System.out.println("GuckGuck: "+ verifyURLStatus(URL));
    assertTrue(verifyURLStatus(URL)==0);

  }

}
