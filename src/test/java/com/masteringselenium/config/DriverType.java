package com.masteringselenium.config;

import com.masteringselenium.config.DriverSetup;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.phantomjs.PhantomJSDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.safari.SafariDriver;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

/** Package: config Generated by: Hoang.Son.Nguyen Generated at: 01.01.2019 2019 */
public enum DriverType implements DriverSetup {
  FIREFOX {
    public DesiredCapabilities getDesiredCapabilities() {
      DesiredCapabilities capabilities = DesiredCapabilities.firefox();
      return capabilities;
    }

    public WebDriver getWebDriverObject(DesiredCapabilities capabilities) {
      return new FirefoxDriver(capabilities);
    }
  },
  CHROME {
    public DesiredCapabilities getDesiredCapabilities() {
      DesiredCapabilities capabilities = DesiredCapabilities.chrome();
      capabilities.setCapability("chrome.switches", Arrays.asList("--no-default-browser-check"));
      HashMap<String, String> chromePreferences = new HashMap<String, String>();
      chromePreferences.put("profile.password_manager_enabled", "false");
      capabilities.setCapability("chrome.prefs", chromePreferences);
      return capabilities;
    }

    public WebDriver getWebDriverObject(DesiredCapabilities capabilities) {
      return new ChromeDriver(capabilities);
    }
  },
  EDGE {
    public DesiredCapabilities getDesiredCapabilities() {
      DesiredCapabilities capabilities = DesiredCapabilities.edge();
      return capabilities;
    }

    @Override
    public WebDriver getWebDriverObject(DesiredCapabilities desiredCapabilities) {
      EdgeOptions options = new EdgeOptions();
      options.merge(desiredCapabilities);

      return new EdgeDriver(options);
    }
  },
  SAFARI {
    public DesiredCapabilities getDesiredCapabilities() {
      DesiredCapabilities capabilities = DesiredCapabilities.safari();
      capabilities.setCapability("safari.cleanSession", true);
      return capabilities;
    }

    public WebDriver getWebDriverObject(DesiredCapabilities capabilities) {
      return new SafariDriver(capabilities);
    }
  },
  OPERA {
    public DesiredCapabilities getDesiredCapabilities() {
      DesiredCapabilities capabilities = DesiredCapabilities.operaBlink();
      return capabilities;
    }

    public WebDriver getWebDriverObject(DesiredCapabilities capabilities) {
      return new OperaDriver(capabilities);
    }
  },
  PHANTOMJS {
    public DesiredCapabilities getDesiredCapabilities() {
      DesiredCapabilities capabilities = DesiredCapabilities.phantomjs();
      final List<String> cliArguments = new ArrayList<String>();
      cliArguments.add("--web-security=false");
      cliArguments.add("--ssl-protocol=any");
      cliArguments.add("--ignore-ssl-errors=true");
      capabilities.setCapability("phantomjs.cli.args", cliArguments);
      capabilities.setCapability("takesScreenshot", true);
      return capabilities;
    }

    public WebDriver getWebDriverObject(DesiredCapabilities capabilities) {
      return new PhantomJSDriver(capabilities);
    }
  };
}
