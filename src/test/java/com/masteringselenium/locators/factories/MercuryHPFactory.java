package com.masteringselenium.locators.factories;

import com.masteringselenium.DriverFactory;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.CacheLookup;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.How;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;
import org.openqa.selenium.support.ui.*;
import org.testng.annotations.Test;
import org.testng.internal.Utils;

import java.io.File;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Function;

import static java.util.concurrent.TimeUnit.SECONDS;

/**
 * Package: com.masteringselenium.locators.factories Generated by: Hoang.Son.Nguyen Generated at:
 * 08.01.2019 2019
 */
public class MercuryHPFactory {
  WebDriver driver;

  public MercuryHPFactory() throws Exception {
    driver = DriverFactory.getDriver();
    // we waits 15 second befort raise a NoSuchElement Error
    WebDriverWait wait = new WebDriverWait(driver, 15);
    // We are going to use “AjaxElementLocatorFactory ” here to wait for the elements to be
    // visible/load
    PageFactory.initElements(new AjaxElementLocatorFactory(driver, 15), this);
  }
  // Xpath by name
  @CacheLookup
  @FindBy(how = How.TAG_NAME, using = "a")
  List<WebElement> byTagName;

  public int countByTagName() {
    return byTagName.size();
  }

  // Xpath by ChromePath
  @CacheLookup
  @FindBy(how = How.XPATH, using = "//input[@name='password']")
  WebElement pwd;

  // incl. implicitWait
  public boolean pwdSisplaed() {
    return new WebDriverWait(driver, 10)
        .until(ExpectedConditions.visibilityOf((pwd)))
        .isDisplayed();
  }

  // Xpath by CSS Sellector
  @CacheLookup
  @FindBy(how = How.XPATH, using = "//img[@src='/images/nav/logo.gif']")
  WebElement logo;

  public boolean logoDisplayed() {
    return new WebDriverWait(driver, 10)
        .until(ExpectedConditions.visibilityOf((logo)))
        .isDisplayed();
  }

  // Css by class of Element
  @CacheLookup
  @FindBy(how = How.CSS, using = ".mouseOut")
  List<WebElement> mouseOut;

  public int mouseOutSize() {
    for (WebElement e : mouseOut) {
      System.out.println(e.getAttribute("onmouseout"));
    }
    return mouseOut.size();
  }

  // CSS using any Attribute
  @CacheLookup
  @FindBy(how = How.CSS, using = "[src='/images/nav/html.gif']")
  WebElement htmlVersion;
  // incl. FluentWait
  public boolean htmlVerDisplay() {
    Wait<WebDriver> fluentWaiter =
        new FluentWait<WebDriver>(driver)
            .withTimeout(15, SECONDS)
            .pollingEvery(2, SECONDS)
            .ignoring(NoSuchElementException.class);

    return fluentWaiter
        .until(
            new Function<WebDriver, WebElement>() {
              public WebElement apply(WebDriver driver) {
                return htmlVersion;
              }
            })
        .isDisplayed();
  }

  // Xpath by any Attribute
  @CacheLookup
  @FindBy(how = How.XPATH, using = "//img[@src='/images/nav/html.gif']")
  WebElement banner;

  public boolean bannerDisplay() {
    return banner.isDisplayed();
  }

  // Xpath by many Attribute incl. and, or
  @CacheLookup
  @FindBy(
      how = How.XPATH,
      using = "//img[@src='/images/hdr_destinations.gif' and @alt ='Desinations']")
  WebElement destinations;

  public boolean destinationsDisplay() {
    return new WebDriverWait(driver, 10)
        .until(ExpectedConditions.visibilityOf((destinations)))
        .isDisplayed();
  }

  // Xpath by many Attribute with * an containt text
  @CacheLookup
  @FindBy(how = How.XPATH, using = "//*[contains(text(),'CONTACT')]")
  WebElement contact;

  public boolean contactDisplay() {
    return contact.isDisplayed();
  }

  // Xpath by many Attribute with containt text
  @CacheLookup
  @FindBy(how = How.XPATH, using = "//font[contains(text(),'to Las Vegas')]")
  WebElement lasVegas;

  public boolean lasVegasDisplay() {
    return lasVegas.isDisplayed();
  }

  // contains partial Attribute
  @CacheLookup
  @FindBy(how = How.XPATH, using = "//img[contains(@src,'/images/hdr_register')]")
  WebElement register;

  public boolean registerDisplay() {
    return register.isDisplayed();
  }

  // locate element through parents, tr[11] = 11. tr-element in tbody
  @CacheLookup
  @FindBy(how = How.XPATH, using = "//tbody/tr[11]/td/img[contains(@src,'links')]")
  WebElement links;

  public boolean linksDisplay() {
    return links.isDisplayed();
  }

  // locate element through childs, tr[11] = 11. tr-element in tbody
  @CacheLookup
  @FindBy(
      how = How.XPATH,
      using = "//tbody/tr[11]/td/img[contains(@src,'links')]/parent::td/parent::tr/parent::tbody")
  WebElement rightPane;

  public boolean rightPaneDisplay() {
    return rightPane.isDisplayed();
  }

  // locate element through sibling, next sibling
  @CacheLookup
  @FindBy(
      how = How.XPATH,
      using = "//td//td//td[@width='273']//tbody//tbody//tr[3]//following-sibling::tr")
  WebElement toChicago;

  public boolean toChicagoDisplay() {
    return toChicago.isDisplayed();
  }

  // locate element through sibling, preceding sibling
  @CacheLookup
  @FindBy(
      how = How.XPATH,
      using = "//td//td//td[@width='273']//tbody//tbody//tr[4]/preceding-sibling::tr")
  WebElement sanfransisco;

  public boolean sanfransiscoDisplay() {
    return sanfransisco.isDisplayed();
  }

  public void setSanfransiscoDoubleClick() {
    Actions builder = new Actions(driver);
    builder.doubleClick(sanfransisco).build().perform();
  }

  @CacheLookup
  @FindBy(
          how = How.XPATH,
          using = "//input[@name='userName']")
  WebElement user;

  @CacheLookup
  @FindBy(
          how = How.XPATH,
          using = "//input[@value='Login']")
  WebElement signIn;

  public void login() {
    user.sendKeys("tutorial");
    pwd.sendKeys("tutorial");
    (new WebDriverWait(driver, 5)) // wait max 5 sec. till sign in found
            .until(
                    new ExpectedCondition<WebElement>() {
                      @Override
                      public WebElement apply(WebDriver d) {
                        return signIn;
                      }
                    }).click();
  }

}
