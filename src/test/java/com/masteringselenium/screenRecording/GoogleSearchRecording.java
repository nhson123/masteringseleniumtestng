package com.masteringselenium.screenRecording;

import com.masteringselenium.DriverFactory;
import org.monte.media.Format;
import org.monte.media.math.Rational;
import org.monte.screenrecorder.ScreenRecorder;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import java.awt.*;
import java.io.IOException;

import static org.monte.media.FormatKeys.*;
import static org.monte.media.VideoFormatKeys.*;
import static org.testng.Assert.fail;
import static org.testng.AssertJUnit.assertEquals;

/**
 * Package: com.masteringselenium.screenRecording Generated by: Hoang.Son.Nguyen Generated at:
 * 20.01.2019 2019
 */
public class GoogleSearchRecording extends DriverFactory {
  private WebDriver driver;
  private StringBuffer verificationErrors = new StringBuffer();
  private ScreenRecorder screenRecorder;

  @BeforeTest
  public void setUp() throws Exception {
    // Create an instance of GraphicsConfiguration to get the
    // Graphics configuration
    // of the Screen. This is needed for ScreenRecorder class.
    GraphicsConfiguration gc =
        GraphicsEnvironment.getLocalGraphicsEnvironment()
            .getDefaultScreenDevice()
            .getDefaultConfiguration();
    // Create a instance of ScreenRecorder with the required     // configurations
    screenRecorder =
        new ScreenRecorder(
            gc,
            new Format(MediaTypeKey, MediaType.FILE, MimeTypeKey, MIME_AVI),
            new Format(
                MediaTypeKey,
                MediaType.VIDEO,
                EncodingKey,
                ENCODING_AVI_TECHSMITH_SCREEN_CAPTURE,
                CompressorNameKey,
                ENCODING_AVI_TECHSMITH_SCREEN_CAPTURE,
                DepthKey,
                (int) 24,
                FrameRateKey,
                Rational.valueOf(15),
                QualityKey,
                1.0f,
                KeyFrameIntervalKey,
                (int) (15 * 60)),
            new Format(
                MediaTypeKey,
                MediaType.VIDEO,
                EncodingKey,
                "black",
                FrameRateKey,
                Rational.valueOf(30)),
            null);
    // new instance of driver
    driver = DriverFactory.getDriver();
    screenRecorder.start();
  }

  @Test
  public void googleSearch() {
    driver.navigate().to("http://www.google.com");
    WebElement element = driver.findElement(By.name("q"));
    element.sendKeys("Cheese");
    element.submit();
    driver.getTitle();
    try {
      // Google's search is rendered dynamically with JavaScript.
      // Wait for the page to load, timeout after 10 seconds
      (new WebDriverWait(driver, 10))
              .until(
                      new ExpectedCondition<Boolean>() {
                        public Boolean apply(WebDriver d) {
                          return d.getTitle().toLowerCase().startsWith("cheese");
                        }
                      });

      // Should see: "Cheese - Google-Suche"
      assertEquals("Cheese - Google-Suche", driver.getTitle());
    } catch (Error e) {
      // Capture and append Exceptions/Errors
      verificationErrors.append(e.toString());
    }
  }

  @AfterTest
  public void tearDown() throws IOException {
    screenRecorder.stop();
    String verificationErrorString = verificationErrors.toString();
    if(!"".equals(verificationErrorString)){
      fail(verificationErrorString);
    }
  }
  //C:\Users\<username>\Videos  folder and on Mac it will save in the ~/Movies  folder.
}
